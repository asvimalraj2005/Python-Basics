# The reduce() function with syntax as given below returns a single value generated by calling the function on the first two items of teh sequence, then on the result and the next item, and so on 
# Syntax of reduce() is reduce(function,sequence)
# Program to calculate the sum of values in a list using the reduce() function 
#
import functools                                    # functools is a module where it consist of reduce() method
#
#
def Sum_of_Value(A,B):                              # Sum_of_Values is a function which takes two values A and B as an arguments
    return A+B                                      # And this method is used to return the sum of the previous value and the next value 
#
#
List_1=[ 1 , 2 , 3 , 4 , 5 , 6 ]                    # List_1 is sequence data structure containing numbers in it 
print(functools.reduce(Sum_of_Value,List_1))        # Using the module functools method named reduce the preprocessing of the sum of values inside the list_1 

                                                    # Below is the diagrammatic representation on how the calculation is help 
                                                    #  1  ,  2  ,  3  ,  4  ,  5  ,  6          
                                                    #  \     /     |     |     |     |
                                                    #   \   /      |     |     |     |
                                                    #     3        |     |     |     |
                                                    #      \       |     |     |     |
                                                    #       \      |     |     |     |
                                                    #        \     |     |     |     |
                                                    #         \    |     |     |     |
                                                    #          \   |     |     |     |
                                                    #            6       |     |     |
                                                    #             \      |     |     |
                                                    #              \     |     |     |
                                                    #               \    |     |     |
                                                    #                 10       |     |
                                                    #                  \       |     |
                                                    #                   \      |     | 
                                                    #                    \     |     |
                                                    #                       15       |
                                                    #                       \        |
                                                    #                        \       |
                                                    #                         \      |
                                                    #                          \     |
                                                    #                           \    |
                                                    #                            \   |
                                                    #                              21
